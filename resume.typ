#import "@preview/basic-resume:0.2.4": *

#let name = "Attila Jamilov"
#let location = "Bellevue, WA"
#let email = "attilajam"
#let github = "github.com/attilajam"
#let linkedin = "linkedin.com/in/attila-jamilov"
#let phone = "+1 (425) 429-8450"
#let personal-site = "stuxf.dev"

#show: resume.with(
  author: name,
  location: location,
  email: email,
  github: github,
  linkedin: linkedin,
  phone: phone,
  // personal-site: personal-site,
  accent-color: "#26428b",
  font: "New Computer Modern",
  paper: "us-letter",
  author-position: left,
  personal-info-position: left,
)

== Education

#edu(
  institution: "University of Washington",
  location: "Seattle, WA, Sep. 2023 - Mar. 2026",
  // dates: dates-helper(start-date: "Aug 2023", end-date: "May 2027"),
  degree: "Bachelor's of Science, ACMS: Discrete Math and Algorithms, Computational Finance and Risk Management",
)
- Competitive Programming Club, 
- *Relevant Coursework*: Data Structures, Algorithms, Financial Markets, Combinatorics I and II, C++ programming, Linear Optimization, Discrete Optimization, Machine Learning with Application to Finance, Probability, Scientific Computing, Database Management, Programing Languages, Artificial Intelligence, . 
#edu(
  institution: "Bellevue College",
  location: "Bellevue, WA, Sep. 2021 - June. 2023",
  degree: "Associate's of Arts and Sciences, Running Start Program",
)
- *Relevant Coursework*: Calculus I, II, III, and IV, Computer Science II.
== Work Experience

#work(
  title: "Research Assistant",
  location: "Seattle, WA",
  company: "Math AI Lab, University of Washington",
  dates: dates-helper(start-date: "Jan. 2025", end-date: "Present"),
)
- Developed a Python-to-Lean4 interface layer, enabling seamless interaction between LLMs and PyTorch models with the Lean4 theorem prover we built to validate proof steps generated by AI models.
- Implemented an A\* search algorithm with custom heuristics to efficiently traverse proof state trees, optimizing the search for formal proofs in a tree-based framework.
- Integrated the LeanDojo (299M) model for tactic generation, achieving a 28.7% success rate on the miniF2F-test benchmark of 244 Olympiad-level math problems.
- Designed a flexible framework to evaluate multiple LLMs and models, streamlining testing and comparison of proof generation performance.
- Contributed to #link("https://github.com/stanford-centaur/PyPantograph", "PyPantograph"), enabling Windows compatibility for the Python-Lean interaction package.
#work(
  title: "AI Coding Analyst",
  company: "Scale AI",
  dates: dates-helper(start-date: "May. 2024", end-date: "Jan. 2025")
)
- Improved LLM performance by designing prompts to generate incorrect code outputs, then debugged and rewrote the generated code to meet prompt requirements, improving the accuracy and reliability of multiple LLMs.
- Oversaw code contributions from team members, reviewing and refactoring their code to ensure client's need are met by deadlines, while maintaining high-quality coding standards.
- Supported contributors by providing targeted feedback and code optimization suggestions.


== Projects
#project(
  dates: 2024,
  name: "Auction API Analyzer",
  url: "https://github.com/attilajam/hypixel-skyblock-auction-scanner"
)
- Built a Go backend that fetches 60,000 auctions from the Hypixel Skyblock API, merges data with the Coflnet API using a union operation, and leverages Go routines for faster data processing.
- Developed a front-end with Go templates, enabling users to search auctions and apply filters like minimum price and profit to identify undervalued items quickly.
== Open Source Contributions
#project(
  dates: 2025,
  name: "Book's Story - Android eBook reader",
  url: "https://github.com/Acclorite/book-story/issues/227"
)
- Fixed an issue with the image parsing, where URL Encoding was not being decoded  properly.
== Skills
*Languages*: Python, Go, C/C++, Rust, HTML, CSS, JS, OCaml, Ruby, R \
*Frameworks*: Flask, Go templates, Fast API \
*Developer Tools*: Git, ssh, Google Cloud Platform, AWS, VS code, Visual Studio, Neovim \
*Documents*: Typst, Latex \
*Libraries*: NumPy, pandas, requests, Selenium, BeautifulSoup, PyTorch, Asyncio, tensorflow, matplotlib, scikitlearn \
*Interests*: Rock climbing, Books, Manga/Manhua, Linux (Arch, Hyprland).
